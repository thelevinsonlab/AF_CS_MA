node <- merge(node, example1_mapped[, c("STRING_id", "gene")], by.x = "id", by.y = "STRING_id", all.x = TRUE)
colnames(node) <- c("id", "altName")
View(node)
View(edge)
createNetworkFromDataFrames(node,edge[1:50,], title="my first network", collection="DataFrame Example")
createNetworkFromDataFrames(node,edge, title="my first network", collection="DataFrame Example")
installation_responses <- c()
#list of app to install
cyto_app_toinstall <- c("clustermaker2", "enrichmentmap", "autoannotate", "wordcloud", "stringapp", "aMatReader", "cytohubba")
&& as.numeric(cytoscape_version[2]>=7)){
View(edge)
createNetworkFromDataFrames(node,edge, title="RAA_network", collection="AF-CS")
hubba_table <- read.csv("~/hubba_table.csv")
View(hubba_table)
RAA_nodes <- read.csv("~/RAA_nodes.csv")
View(RAA_nodes)
merged_data <- cbind(RAA_nodes, hubba_table)
View(merged_data)
cytoHubba_results <- cbind(RAA_nodes, hubba_table)
cytoHubba_results[order(-cytoHubba_results$MCC), ][1:10, ]
node_scores <- read.csv("~/node_scores.csv")
View(node_scores)
View(node)
node_scores <- node_scores %>% rownames_to_column("id")
node_scores <- read.csv("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/data/node_scores.csv")
View(node_scores)
cytoHubba_results <- merge(node_scores, node, by = "id")
node_scores <- node_scores %>% rownames_to_column("id")
cytoHubba_results <- merge(node_scores, node, by = "id")
View(cytoHubba_results)
cytoHubba_results[order(-cytoHubba_results$MCC), ][1:10, ]
cytoHubba_results[order(-cytoHubba_results$DMNC), ][1:10, ]
networks_list <- getNetworkList()
# List to store information for each network
all_networks_info <- list()
for (network_suid in networks_list$SUID) {
# Get information about the nodes
nodes_df <- getTableColumns('node', network = network_suid)
# Get information about the edges
edges_df <- getTableColumns('edge', network = network_suid)
# Store information in the list
all_networks_info[[as.character(network_suid)]] <- list(nodes = nodes_df, edges = edges_df)
}
networks_list
network_names <- c("RAA_network_DMNC_top10", "RAA_network_MCC_top30",  "RAA_network_MCC_top40", "RAA_network_DMNC_top20", "RAA_network_MCC_top10", "RAA_network_MNC_top50", "RAA_network_MNC_top40", "RAA_network", "RAA_network_MNC_top30", "RAA_network_MCC_top20", "RAA_network_MNC_top20", "RAA_network_MNC_top10", "RAA_network_DMNC_top30", "RAA_network_DMNC_top40", "RAA_network_DMNC_top50", "RAA_network_MCC_top50")
for (network_name in network_names) {
# Get the SUID for the network by name
network_suid <- networks_list[networks_list$name == network_name, "SUID"]
# Get information about the nodes
nodes_df <- getTableColumns('node', network = network_suid)
# Get information about the edges
edges_df <- getTableColumns('edge', network = network_suid)
# Continue processing the information as needed
}
network_names <- c("RAA_network_DMNC_top10", "RAA_network_MCC_top30", "RAA_network_MCC_top40", "RAA_network_DMNC_top20", "RAA_network_MCC_top10", "RAA_network_MNC_top50", "RAA_network_MNC_top40", "RAA_network_MNC_top30", "RAA_network_MCC_top20", "RAA_network_MNC_top20", "RAA_network_MNC_top10", "RAA_network_DMNC_top30", "RAA_network_DMNC_top40", "RAA_network_DMNC_top50", "RAA_network_MCC_top50")
# List to store information for each network
all_networks_info <- list()
for (network_name in network_names) {
# Set the current network by name
setCurrentNetwork(network_name)
# Get the current network SUID
network_suid <- getCurrentNetwork()
# Get information about the nodes
nodes_df <- getTableColumns('node', network = network_suid)
# Get information about the edges
edges_df <- getTableColumns('edge', network = network_suid)
# Store information in the list
all_networks_info[[network_name]] <- list(nodes = nodes_df, edges = edges_df)
}
#Get the information from the currently used networks
network_suids <- getNetworkSUIDs()
RAA_network_DMNC_top10 <- getNetworkSuid(title = RAA_network_DMNC_top10)
RAA_network_DMNC_top10 <- getNetworkSuid(title = "RAA_network_DMNC_top10")
RAA_network_DMNC_top10 <- getAllNodes(title = "RAA_network_DMNC_top10")
RAA_network_DMNC_top10 <- 	importNetworkFromNDEx(title = "RAA_network_DMNC_top10")
network_suids <- getNetworkSUIDs()
network_suids <- getNetworkSuid()
network_suids <- getNetworkSuid(network_names)
network_suids <- getNetworkSuid(title = network_names)
network_suids <- getNetworkSuid(title = "network_names")
network_suids <- getNetworkSuid(title = "RAA_network_DMNC_top10")
setCurrentNetwork(network_suids[1]) # Replace with the appropriate index or SUID
nodes_df <- getTableColumns('node')
edges_df <- getTableColumns('edge')
View(nodes_df)
View(node)
import_networks <- function(network_names) {
# List to store information for each network
all_networks_info <- list()
for (network_name in network_names) {
# Get the SUID for the network by name
network_suid <- getNetworkSuid(title = network_name)
# Set the current network by SUID
setCurrentNetwork(network_suid[1])
# Get information about the nodes
nodes_df <- getTableColumns('node')
# Get information about the edges
edges_df <- getTableColumns('edge')
# Create file names
nodes_file_name <- paste0("nodes_df_", gsub("RAA_network_", "", network_name), ".csv")
edges_file_name <- paste0("edges_df_", gsub("RAA_network_", "", network_name), ".csv")
# Save to CSV files
write.csv(nodes_df, nodes_file_name, row.names = FALSE)
write.csv(edges_df, edges_file_name, row.names = FALSE)
# Store information in the list
all_networks_info[[network_name]] <- list(nodes = nodes_df, edges = edges_df)
}
return(all_networks_info)
}
# List of network names
network_names <- c("RAA_network_DMNC_top10", "RAA_network_MCC_top30", "RAA_network_MCC_top40", "RAA_network_DMNC_top20", "RAA_network_MCC_top10", "RAA_network_MNC_top50", "RAA_network_MNC_top40", "RAA_network_MNC_top30", "RAA_network_MCC_top20", "RAA_network_MNC_top20", "RAA_network_MNC_top10", "RAA_network_DMNC_top30", "RAA_network_DMNC_top40", "RAA_network_DMNC_top50", "RAA_network_MCC_top50")
# Call the function
all_networks_info <- import_networks(network_names)
View(all_networks_info)
# Assuming you have a list 'all_networks_info' with nodes and edges information
for (network_name in names(all_networks_info)) {
nodes_df <- all_networks_info[[network_name]]$nodes
edges_df <- all_networks_info[[network_name]]$edges
# Create an igraph object (adjust the code as needed based on your data structure)
g <- graph_from_data_frame(edges_df, vertices = nodes_df)
# Plot the network
plot(g, main = paste("Network:", network_name))
}
for (network_name in names(all_networks_info)) {
nodes_df <- all_networks_info[[network_name]]$nodes
edges_df <- all_networks_info[[network_name]]$edges
# Create an igraph object using only the edges data frame
g <- graph_from_data_frame(edges_df, directed = FALSE) # Adjust 'directed' as needed
# Add vertex attributes from nodes_df
V(g)$name <- nodes_df$id[match(V(g)$name, nodes_df$id)] # Adjust 'id' to match your node identifier
# Add any other vertex attributes as needed
# ...
# Plot the network
plot(g, main = paste("Network:", network_name))
}
str(all_networks_info)
View(all_networks_info)
common_counts <- c() # To store the count of common genes for each top category
# Define categories and algorithms
categories <- c("top10", "top20", "top30", "top40", "top50")
algorithms <- c("MCC", "MNC", "DMNC")
for (category in categories) {
genes_list <- list()
for (algorithm in algorithms) {
# Construct the network name
network_name <- paste("RAA_network", algorithm, category, sep = "_")
# Extract genes from the nodes data frame
genes <- all_networks_info[[network_name]]$nodes$altName
# Store in the list
genes_list[[algorithm]] <- genes
}
# Identify common genes across the algorithms
common_genes <- Reduce(intersect, genes_list)
# Store the count
common_counts <- c(common_counts, length(common_genes))
}
# Create a named vector for plotting
common_counts_named <- setNames(common_counts, c("Top 10", "Top 20", "Top 30", "Top 40", "Top 50"))
# Create the barplot
barplot(common_counts_named, xlab = "Top Genes Category", ylab = "Number of Common Genes", main = "Common Genes Across Algorithms", col = "skyblue")
View(node_scores)
View(genes_list)
common_counts_named
# Define the category for top 30
category <- "top30"
# List to store genes for each algorithm
genes_list <- list()
# Iterate through the algorithms
for (algorithm in algorithms) {
# Construct the network name
network_name <- paste("RAA_network", algorithm, category, sep = "_")
# Extract genes from the nodes data frame
genes <- all_networks_info[[network_name]]$nodes$altName
# Store in the list
genes_list[[algorithm]] <- genes
}
# Find genes that are present in at least two of the lists
common_genes_at_least_two <- unique(unlist(lapply(genes_list, function(genes) {
genes[genes %in% unlist(genes_list[-match(genes, genes_list)])]
})))
# Print the common genes
common_genes_at_least_two
genes <- all_networks_info[["RAA_network_MCC_top30"]]$nodes$altName
genes_MNC <- all_networks_info[["RAA_network_MNC_top30"]]$nodes$altName
genes_DMNC <- all_networks_info[["RAA_network_DMNC_top30"]]$nodes$altName
# Combine the gene lists into a single vector
all_genes <- c(genes_MCC, genes_MNC, genes_DMNC)
genes_MCC <- all_networks_info[["RAA_network_MCC_top30"]]$nodes$altName
genes_MNC <- all_networks_info[["RAA_network_MNC_top30"]]$nodes$altName
genes_DMNC <- all_networks_info[["RAA_network_DMNC_top30"]]$nodes$altName
# Combine the gene lists into a single vector
all_genes <- c(genes_MCC, genes_MNC, genes_DMNC)
# Find the genes that appear more than once (i.e., in at least two lists)
overlapping_genes <- names(table(all_genes)[table(all_genes) > 1])
# Print the overlapping genes
overlapping_genes
# Find the genes that appear more than once (i.e., in at least two lists)
overlapping_genes <- names(table(all_genes)[table(all_genes) > 2])
# Print the overlapping genes
overlapping_genes
CTD_Results_RAA <- read.csv("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/data/CTD_Results_RAA.csv", comment.char="#")
View(CTD_Results_RAA)
View(CTD_Results_RAA)
CTD_Results_RAA <- read.csv("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/data/CTD_Results_RAA.csv", header=FALSE, comment.char="#")
View(CTD_Results_RAA)
View(CTD_Results_RAA)
new_column_names = {
"V1": "Input Identifier",
colnames(CTD_Results_RAA) <- c(
"Input Identifier",
"Chemical Name",
"Chemical ID",
"Chemical Abstract Service Registry Number",
"Gene Symbol",
"Gene ID",
"Organism Name",
"Organism ID",
"Description of Interaction",
"Specific Interaction Actions",
"Reference to Scientific Literature"
)
selected_organisms <- c("Homo sapiens", "Rattus norvegicus", "Mus musculus")
CTD_Results_RAA <- CTD_Results_RAA[CTD_Results_RAA$'Organism Name' %in% selected_organisms, ]
chemical_counts <- table(CTD_Results_RAA$'Chemical Name')
chemicals_with_five_or_more_genes <- names(chemical_counts[chemical_counts >= 5])
CTD_Results_RAA <- CTD_Results_RAA[CTD_Results_RAA$'Chemical Name' %in% chemicals_with_five_or_more_genes, ]
View(CTD_Results_RAA)
str(CTD_Results_RAA)
CTD_Results_RAA$Interaction_Type <- ifelse(grepl("increases", CTD_Results_RAA$'Description of Interaction'), "Increases", ifelse(grepl("decreases", CTD_Results_RAA$'Description of Interaction'), "Decreases", NA))
View(CTD_Results_RAA)
head(CTD_Results_RAA$`Description of Interaction`)
CTD_Results_RAA$Interaction_Type <- ifelse(grepl("increases", CTD_Results_RAA$`Description of Interaction`), "Increases", ifelse(grepl("decreases", CTD_Results_RAA$`Description of Interaction`), "Decreases", NA))
head(CTD_Results_RAA$`Specific Interaction Actions`)
CTD_Results_RAA$Interaction_Type <- ifelse(grepl("increases\\^expression", CTD_Results_RAA$`Specific Interaction Actions`), "Increase", ifelse(grepl("decreases\\^expression", CTD_Results_RAA$`Specific Interaction Actions`), "Decrease", NA))
View(CTD_Results_RAA)
library(reshape2)
# Creating a wide data frame
CTD_Results_RAA_wide <- dcast(CTD_Results_RAA, `Chemical Name` ~ `Gene Symbol`, value.var = "Interaction_Type", fun.aggregate = function(x) paste(unique(x), collapse = ","))
View(CTD_Results_RAA_wide)
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Antirheumatic Agents", "Ascorbic Acid", "Calcitriol", "Curcumin", "Dexamethasone", "epoxiconazole", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA[CTD_Results_RAA$`Chemical Name` %in% chemicals_of_interest, ]
View(subset_data)
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
View(subset_data)
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Curcumin", "Dexamethasone", "epoxiconazole", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Cannabidiol", "Curcumin", "Dexamethasone", "epoxiconazole", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
View(subset_data)
# Creating a wide data frame
CTD_Results_RAA_wide <- dcast(CTD_Results_RAA, `Chemical Name` ~ `Gene Symbol`, value.var = "Interaction_Type", fun.aggregate = function(x) paste(unique(x), collapse = ","))
View(CTD_Results_RAA_wide)
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Cannabidiol", "Curcumin", "Dexamethasone", "epoxiconazole", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Cannabidiol", "Curcumin", "Dexamethasone", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
View(clustersList)
for(i in seq(1:10)){
string_db$plot_network(clustersList[[i]])
}
# Find the common genes
hub_genes <- names(table(all_genes)[table(all_genes) > 2])
# Print the overlapping genes
hub_genes
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
source("src/utils_AF_Meta.R")
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
# Here we get AUC for pairwise classifiers
pairwise_500 = pairwise_ds_AF(experiments = experiments,
meta_list = AF_Meta,
t_matrix = t_matrix,
ngenes = 500) #Second page excel
ds_top = getRisk_Stats_AF(Experiment_List = AF_Meta,
limma_t_mat = t_matrix,
genes = hub_genes)
ds_top_predictions = enframe(lapply(ds_top, function(x) {
enframe(x[["SingleAUC"]])
})) %>% unnest()
colnames(ds_top_predictions) = c("PredictedExperiment",
"PredictorExperiment",
"meta_auc")
comp_df = left_join(pairwise_500,
ds_top_predictions) %>%
dplyr::filter(PredictedExperiment != PredictorExperiment) %>%
dplyr::select(PredictorExperiment,
PredictedExperiment,
single, meta_auc)
print("Are AUCs better?")
wilcox.test(comp_df$meta_auc,comp_df$single,paired = T,alternative = "greater")
median(comp_df$meta_auc)
median(comp_df$single)
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
source("src/utils_AF_Meta.R")
experiments = names(AF_Meta)
names(experiments) = experiments
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
# Here we get AUC for pairwise classifiers
pairwise_500 = pairwise_ds_AF(experiments = experiments,
meta_list = AF_Meta,
t_matrix = t_matrix,
ngenes = 500) #Second page excel
# Here we get the results from performing the meta-analysis
fisher_rank = run_fisher_meta_AF(meta_list = AF_Meta,
n_missing = length(AF_Meta) - 5)
sum(fisher_rank < .00005)
genes = names(fisher_rank)
# Here we get the calculations of using the top N genes from the meta-analysis
ds_top = getRisk_Stats_AF(Experiment_List = AF_Meta,
limma_t_mat = t_matrix,
genes = names(fisher_rank[1:500]))
ds_top_predictions = enframe(lapply(ds_top, function(x) {
enframe(x[["SingleAUC"]])
})) %>% unnest()
colnames(ds_top_predictions) = c("PredictedExperiment",
"PredictorExperiment",
"meta_auc")
# Here we merge them
comp_df = left_join(pairwise_500,
ds_top_predictions) %>%
dplyr::filter(PredictedExperiment != PredictorExperiment) %>%
dplyr::select(PredictorExperiment,
PredictedExperiment,
single, meta_auc)
print("Are AUCs better?")
wilcox.test(comp_df$meta_auc,comp_df$single,paired = T,alternative = "greater")
median(comp_df$single)
median(comp_df$meta_auc)
source("src/utils_AF_Meta.R")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
set.seed(123)
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
# Here we get AUC for pairwise classifiers
pairwise_500 = pairwise_ds_AF(experiments = experiments,
meta_list = AF_Meta,
t_matrix = t_matrix,
ngenes = 500) #Second page excel
# Here we get the results from performing the meta-analysis
fisher_rank = run_fisher_meta_AF(meta_list = AF_Meta,
n_missing = length(AF_Meta) - 5)
sum(fisher_rank < .00005)
genes = names(fisher_rank)
# Here we get the calculations of using the top N genes from the meta-analysis
ds_top = getRisk_Stats_AF(Experiment_List = AF_Meta,
limma_t_mat = t_matrix,
genes = names(fisher_rank[1:500]))
ds_top_predictions = enframe(lapply(ds_top, function(x) {
enframe(x[["SingleAUC"]])
})) %>% unnest()
colnames(ds_top_predictions) = c("PredictedExperiment",
"PredictorExperiment",
"meta_auc")
# Here we merge them
comp_df = left_join(pairwise_500,
ds_top_predictions) %>%
dplyr::filter(PredictedExperiment != PredictorExperiment) %>%
dplyr::select(PredictorExperiment,
PredictedExperiment,
single, meta_auc)
print("Are AUCs better?")
wilcox.test(comp_df$meta_auc,comp_df$single,paired = T,alternative = "greater")
median(comp_df$meta_auc)
median(comp_df$single)
hub_genes <- c("BMP7","CACNA1D","CACNB2","CHL1","FBN2","FGF1","FGF7","HSPA2","KCND3","PLP1","RPS6KA5","TGFBR2","TNNI3","TNNT1")
set.seed(123)
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
source("src/utils_AF_Meta.R")
hub_genes <- c("BMP7","CACNA1D","CACNB2","CHL1","FBN2","FGF1","FGF7","HSPA2","KCND3","PLP1","RPS6KA5","TGFBR2","TNNI3","TNNT1")
set.seed(123)
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
# Here we get AUC for pairwise classifiers
pairwise_500 = pairwise_ds_AF(experiments = experiments,
meta_list = AF_Meta,
t_matrix = t_matrix,
ngenes = 500) #Second page excel
ds_top = getRisk_Stats_AF(Experiment_List = AF_Meta,
limma_t_mat = t_matrix,
genes = hub_genes)
ds_top_predictions = enframe(lapply(ds_top, function(x) {
enframe(x[["SingleAUC"]])
})) %>% unnest()
colnames(ds_top_predictions) = c("PredictedExperiment",
"PredictorExperiment",
"meta_auc")
comp_df = left_join(pairwise_500,
ds_top_predictions) %>%
dplyr::filter(PredictedExperiment != PredictorExperiment) %>%
dplyr::select(PredictorExperiment,
PredictedExperiment,
single, meta_auc)
print("Are AUCs better?")
wilcox.test(comp_df$meta_auc,comp_df$single,paired = T,alternative = "greater")
median(comp_df$single)
median(comp_df$meta_auc)
CTD_Results_RAA <- read.csv("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/data/CTD_Results_RAA.csv", header=FALSE, comment.char="#")
colnames(CTD_Results_RAA) <- c(
"Input Identifier",
"Chemical Name",
"Chemical ID",
"Chemical Abstract Service Registry Number",
"Gene Symbol",
"Gene ID",
"Organism Name",
"Organism ID",
"Description of Interaction",
"Specific Interaction Actions",
"Reference to Scientific Literature"
)
selected_organisms <- c("Homo sapiens", "Rattus norvegicus", "Mus musculus")
CTD_Results_RAA <- CTD_Results_RAA[CTD_Results_RAA$'Organism Name' %in% selected_organisms, ]
chemical_counts <- table(CTD_Results_RAA$'Chemical Name')
chemical_counts
library(STRINGdb)
library(RCy3)
library(dplyr)
library(igraph)
library(biomaRt)
library(reshape2)
library(readxl)
library(grid)
library(gridExtra)
source("src/utils_AF_Meta.R")
RAA_DE_genes <- read_excel("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/SupplementalTable2.xlsx")
RAA_DE_genes <- RAA_DE_genes %>% select(c(fisher_pvalue, mean_lfc, gene)) %>% filter(fisher_pvalue <0.05) %>% rename(pvalue = fisher_pvalue) %>%
rename(logFC = mean_lfc) %>% as.data.frame()
RAA_DE_genes <- RAA_DE_genes %>% dplyr::select(c(fisher_pvalue, mean_lfc, gene)) %>% filter(fisher_pvalue <0.05) %>% rename(pvalue = fisher_pvalue) %>%
rename(logFC = mean_lfc) %>% as.data.frame()
string_db <- STRINGdb$new(version = "11.5", species = 9606, score_threshold = 400, input_directory="")
class(string_db)
example1_mapped <- string_db$map(RAA_DE_genes, "gene", removeUnmappedRows = TRUE )
dim(example1_mapped)
#View(example1_mapped)
hits <- example1_mapped$STRING_id
pdf("data/figures/sup/SupplementalFigure12.pdf", width = 14, height = 10)
grid.draw(string_db$plot_network(hits))
grid.text("B", x = 0.025, y = 0.97,
just = "center", gp = gpar(fontsize = 18, col = "black")) # adjust position, color, size as needed
dev.off()
# Replace empty strings with 0
subset_data[subset_data == ""] <- 0
CTD_Results_RAA <- read.csv("~/PhD Heidelberg/Projects/AF_MA_Master_RAA/data/CTD_Results_RAA.csv", header=FALSE, comment.char="#")
colnames(CTD_Results_RAA) <- c(
"Input Identifier",
"Chemical Name",
"Chemical ID",
"Chemical Abstract Service Registry Number",
"Gene Symbol",
"Gene ID",
"Organism Name",
"Organism ID",
"Description of Interaction",
"Specific Interaction Actions",
"Reference to Scientific Literature"
)
selected_organisms <- c("Homo sapiens", "Rattus norvegicus", "Mus musculus")
CTD_Results_RAA <- CTD_Results_RAA[CTD_Results_RAA$'Organism Name' %in% selected_organisms, ]
chemical_counts <- table(CTD_Results_RAA$'Chemical Name')
chemicals_with_five_or_more_genes <- names(chemical_counts[chemical_counts >= 5])
CTD_Results_RAA <- CTD_Results_RAA[CTD_Results_RAA$'Chemical Name' %in% chemicals_with_five_or_more_genes, ]
CTD_Results_RAA$Interaction_Type <- ifelse(grepl("increases\\^expression", CTD_Results_RAA$`Specific Interaction Actions`), "Increase", ifelse(grepl("decreases\\^expression", CTD_Results_RAA$`Specific Interaction Actions`), "Decrease", NA))
# Creating a wide data frame
CTD_Results_RAA_wide <- dcast(CTD_Results_RAA, `Chemical Name` ~ `Gene Symbol`, value.var = "Interaction_Type", fun.aggregate = function(x) paste(unique(x), collapse = ","))
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Cannabidiol", "Curcumin", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
# Replace empty strings with 0
subset_data[subset_data == ""] <- 0
# Replace all remaining non-zero values with 1
subset_data[, -1] <- ifelse(subset_data[, -1] != 0, 1, 0)
# Convert to Long Format
subset_data_long <- subset_data %>%
pivot_longer(cols = -`Chemical Name`, names_to = "Gene", values_to = "Value")
write.csv(subset_data_long, file="~/PhD Heidelberg/Projects/AF_MA_Master_RAA/drug_targets_result_RAA.csv")
subset_data_long
subset_data_long <- subset_data_long %>% filter(Value=1)
subset_data_long_network <- subset_data_long %>% filter(Value==1)
View(subset_data_long_network)
write.csv(subset_data_long_network, file="~/PhD Heidelberg/Projects/AF_MA_Master_RAA/drug_targets_result_RAA.csv")
chemicals_of_interest <- c("Acetaminophen", "Acetylcysteine", "Ascorbic Acid", "Calcitriol", "Curcumin", "Estradiol", "Fenretinide", "Folic Acid", "Genistein", "pirinixic acid", "Progesterone", "Resveratrol", "Valproic Acid")
subset_data <- CTD_Results_RAA_wide[CTD_Results_RAA_wide$`Chemical Name` %in% chemicals_of_interest, ]
# Replace empty strings with 0
subset_data[subset_data == ""] <- 0
# Replace all remaining non-zero values with 1
subset_data[, -1] <- ifelse(subset_data[, -1] != 0, 1, 0)
# Convert to Long Format
subset_data_long <- subset_data %>%
pivot_longer(cols = -`Chemical Name`, names_to = "Gene", values_to = "Value")
subset_data_long_network <- subset_data_long %>% filter(Value==1)
write.csv(subset_data_long_network, file="~/PhD Heidelberg/Projects/AF_MA_Master_RAA/drug_targets_result_RAA.csv")
pdf("data/figures/sup/SupplementalFigure7.pdf",
width = 10,
height = 8)
