library(fgsea)
library(viper)
library(progeny)
source("src/data_utils.R") #general functions
source("src/misc_utils.R")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
genesets = readRDS("./Genesets_Jun23.rds") #MSigDB gene sets
# Load dororthea regulons
dorothea_regulon_human =
read_csv("https://raw.githubusercontent.com/saezlab/ConservedFootprints/master/data/dorothea_benchmark/regulons/dorothea_regulon_human_v1.csv")
# We obtain the regulons based on interactions with confidence level A, B, C and D
regulons = dorothea_regulon_human %>%
dplyr::filter(confidence %in% c("A","B","C","D")) %>%
df2regulon()
# Iterators with experiments as names
experiments = names(AF_Meta)
names(experiments) = experiments
get_all_limma_AF <- function(meta_list, limma_column){
sel_cols =  c("ID","ExpID", limma_column)
limma_results = get_tibble_union(meta_list,"AF_limma") %>%
dplyr::select(sel_cols) %>%
spread(sel_cols[2],sel_cols[3])
limma_results_mat =  as.matrix(limma_results[,-1])
rownames(limma_results_mat) = limma_results[[1]]
return(limma_results_mat)
}
run_fisher_meta_AF <- function(meta_list, n_missing = 4){
library(survcomp)
# Getting p-values from limma
limma_pvals = get_all_limma_AF(meta_list = meta_list, "P.Value")
# Use only genes that are present in all experiments (missing in n at most)
limma_results_mat = limma_pvals[rowSums(is.na(limma_pvals))<=n_missing,]
# Fisher combined test
fisher_pvals = apply(limma_results_mat, 1, function(x){
survcomp::combine.test(x, "fisher", na.rm = T)
})
fisher_pvals_adj = sort(p.adjust(fisher_pvals,"BH"))
return(fisher_pvals_adj)
}
#a gene can be missing  in at most 4 experiments
fisher_rank = run_fisher_meta_AF(meta_list = AF_Meta,
n_missing = length(AF_Meta) - 4)
genes = names(fisher_rank)
lfc_matrix = (get_all_limma_AF(meta_list = AF_Meta,
limma_column = "logFC"))[genes,]
# Generating ranks for GSEA
progeny_rank = dorothea_rank = gsea_rank = sort(rowMeans(sign(lfc_matrix),na.rm = T) * -log10(fisher_rank),
decreasing = T) #Ranking penalizing inconsistency in direction
saveRDS(progeny_rank,
file = "./directed_ranking.rds")
#1. GSEA
red_gensets = genesets[c("MSIGDB_CANONICAL","MSIGDB_HMARKS",
"MSIGDB_GO_CELLCOMP","MSIGDB_GO_BIOLPROC",
"MSIGDB_GO_MOLFUNC", "MSIGDB_REACTOME")]
gsea_meta = lapply(red_gensets, function(x){
set.seed(1234) # fgsea unstable results
GSEA_results = fgsea(pathways = x, stats = gsea_rank,
minSize = 15, maxSize = 300,
nperm = 1000) %>% as_tibble() %>%
arrange(desc(abs(NES)))
})
#For plotting
selected_ps = enframe(gsea_meta) %>% unnest() %>%
arrange(desc(abs(NES))) %>% dplyr::slice(1:50) %>% filter(!duplicated(pathway)) %>%
arrange(NES) %>% mutate(pathway = strtrim(pathway,40))
selected_ps = selected_ps[!duplicated(selected_ps$pathway),]
saveRDS(selected_ps,
file = "./GSEA_results_sel.rds")
#For supplementary
all_GSEA = enframe(gsea_meta,name = "database","value") %>% unnest() %>%
arrange(desc(abs(NES))) %>% dplyr::mutate(padj = p.adjust(pval,method = "fdr"))
print("N gene sets")
print(dim(all_GSEA))
print("N p_val<0.05")
print(dim(all_GSEA %>% dplyr::filter(pval<=0.05)))
saveRDS(all_GSEA,
file = "./GSEA_results.rds")
# 1.1 miRNAs
gset = genesets$MSIGDB_MIRNA
set.seed(1234) # fgsea unstable results
#miRNA_results = fgsea(pathways = gset, stats = gsea_rank,
#                     minSize = 15, maxSize = 300, nperm = 1000) %>% as_tibble() %>%
#  arrange(desc(abs(NES))) %>% dplyr::select(pathway, pval, padj, ES, NES)
# What if we try viper
miRNAs_regulons = enframe(gset,value = "target",name = "tf") %>%
unnest() %>% mutate(mor = 1, likelihood = 1) %>%
df2regulon()
miRNA_results = msviper_summary(msviper(gsea_rank,
miRNAs_regulons,
minsize = 10,
verbose = FALSE))
print("N miRNA")
print(dim(miRNA_results))
print("N p_val<0.05")
print(dim(miRNA_results %>% dplyr::filter(pvalue<=0.05)))
saveRDS(miRNA_results,
file = "./GSEA_mir_results.rds")
saveRDS(miRNA_results,
file = "./GSEA_mir_results.rds")
#2. Dorothea
dorothea_results = msviper_summary(msviper(dorothea_rank,
regulons,
minsize = 10,
verbose = FALSE))
print("N TFs")
print(dim(dorothea_results))
print("N p_val<0.05")
print(dim(dorothea_results %>% dplyr::filter(pvalue<=0.05)))
saveRDS(dorothea_results,
file = "./dorothea_results.rds")
saveRDS(dorothea_results,
file = "./dorothea_results.rds")
#3. PROGENy
progeny_rank_mat = as.matrix(progeny_rank)
colnames(progeny_rank_mat) = "meta"
meta_progeny = t(progeny(progeny_rank_mat,scale = FALSE, organism = "Human",
top = 200, perm =1))
#Calculation of pvalues permuting rank
set.seed(1234)
permutation_prog = sapply(1:1000, function(x){
rnd_order = progeny_rank_mat
rownames(rnd_order) = sample(rownames(rnd_order))
progeny(rnd_order,scale = FALSE, organism = "Human",
top = 200, perm =1)
})
rownames(permutation_prog) = rownames(meta_progeny)
progeny_pvals = meta_progeny[,1]
for(p in names(meta_progeny[,1])){
metascore = meta_progeny[p,1]
if(sign(metascore)>0){
pval = sum(permutation_prog >= metascore)/length(permutation_prog)
}else{
pval = sum(permutation_prog <= metascore)/length(permutation_prog)
}
progeny_pvals[p] = pval
}
prog_res = tibble(progeny_scores = meta_progeny[,1],
progeny_pvals, pathway = names(progeny_pvals)) %>%
arrange(progeny_pvals)
print("N paths")
print(dim(prog_res))
print("N p_val<0.05")
print(dim(prog_res %>% dplyr::filter(progeny_pvals<=0.05)))
saveRDS(prog_res,
file = "./PROGENy_results.rds")
saveRDS(prog_res,
file = "./PROGENy_results.rds")
#Generating supplementary table
data_list <- list("all_GSEA" = all_GSEA,
"dorothea_results" = dorothea_results,
"prog_res" = prog_res,
"miRNA_results" = miRNA_results)
openxlsx::write.xlsx(data_list, "SupplementalTable3.xlsx")
library(tidyverse)
library(cowplot)
GSEA = readRDS(file = "./GSEA_results.rds")
dorothea = readRDS(file = "./dorothea_results.rds")
progeny = readRDS(file = "./PROGENy_results.rds")
miRNA = readRDS(file = "./GSEA_mir_results.rds")
# aesthetics
get_lfc_colors = circlize::colorRamp2(seq(-4,4,.5),
c(rev(colorRampPalette(RColorBrewer::brewer.pal(9, 'Blues'))(9)),
colorRampPalette(RColorBrewer::brewer.pal(9, 'Reds'))(8)))
cols = get_lfc_colors(seq(-4,4,1))
# GSEA filtering
GSEA_filtering = GSEA %>% dplyr::filter(pval < 0.05) %>%
slice(1:50) %>%
arrange(-log2(pval) * sign(NES)) %>%
mutate(dir_reg = sign(ES),
log_pval = -log10(pval),
dir_col = dir_reg * log_pval,
gset = pathway,
tile_color = get_lfc_colors(dir_col)) %>%
dplyr::select(gset,dir_col,tile_color)
GSEA_filtering$gset = factor(GSEA_filtering$gset,
levels = GSEA_filtering$gset)
g1 <- GSEA_filtering %>%
ggplot(aes(x=gset, y=1, fill=factor(1:nrow(GSEA_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 0, 0), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(GSEA_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
# Dorothea_filtering
dorothea_filtering = dorothea %>% dplyr::filter(pvalue < 0.05) %>%
arrange(-log2(pvalue) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName,
tile_color = get_lfc_colors(dir_col))
dorothea_filtering$gset = factor(dorothea_filtering$gset,
levels = dorothea_filtering$gset)
g2 <- dorothea_filtering %>%
ggplot(aes(x=gset, y=1,
fill=factor(1:nrow(dorothea_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 0, 0.5), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(dorothea_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
plot_grid(g1,g2)
# PROGENy filtering
progeny_filtering = progeny %>%
arrange(-log2(progeny_pvals) * sign(progeny_scores)) %>%
mutate(dir_reg = sign(progeny_scores),
log_pval = -log10(progeny_pvals),
dir_col = dir_reg * log_pval,
gset = pathway,
tile_color = get_lfc_colors(dir_col))
progeny_filtering$gset = factor(progeny_filtering$gset,
levels = progeny_filtering$gset)
g3 = progeny_filtering %>%
ggplot(aes(x=gset, y=1,
fill=factor(1:nrow(progeny_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 12.7, .5), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(progeny_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
# miRNAs
miRNA_filtering = miRNA %>% dplyr::filter(pvalue < 0.05) %>%
arrange(-log2(pval) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName,
tile_color = get_lfc_colors(dir_col)) %>%
dplyr::select(gset,dir_col,tile_color)
miRNA_filtering$gset = unlist(lapply(strsplit(miRNA_filtering$gset,
"[A-Z]_"),
function(x) x[2]))
miRNA_filtering$gset = factor(miRNA_filtering$gset,
levels = miRNA_filtering$gset)
library(tidyverse)
library(cowplot)
GSEA = readRDS(file = "data/shiny/GSEA_results.rds")
dorothea = readRDS(file = "data/figure_objects/dorothea_results.rds")
progeny = readRDS(file = "data/figure_objects/PROGENy_results.rds")
miRNA = readRDS(file = "data/figure_objects/GSEA_mir_results.rds")
# GSEA filtering
GSEA_filtering = GSEA %>%
arrange(padj) %>%
slice(1:50) %>%
arrange(-log10(padj) * sign(NES)) %>%
mutate(pathway = strtrim(pathway,40)) %>%
mutate(dir_reg = sign(ES),
log_pval = -log10(padj),
gset = pathway)
GSEA_filtering$gset = factor(GSEA_filtering$gset,
levels = GSEA_filtering$gset)
g1 = ggplot(GSEA_filtering, aes(x=gset, y=log_pval,
fill = factor(dir_reg))) +
geom_bar(stat = "identity") + theme_minimal() +
geom_hline(yintercept = -log10(0.25),linetype="dotted" ) +
coord_flip() +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(hjust = 1),
panel.grid = element_blank(),
legend.position = "none",
axis.title.x = element_text(size = 9),
#plot.margin = unit(c(0, 0, 0, 0), 'cm')
) + ylab("-log10(BH p-value)") +
scale_fill_manual(values = c("steelblue","indianred"))
# Dorothea_filtering
dorothea_filtering = dorothea %>% dplyr::slice(1:50) %>%
#dplyr::filter(pvalue < 0.05) %>%
arrange(-log10(adj_pvalue) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(adj_pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName)
dorothea_filtering$gset = factor(dorothea_filtering$gset,
levels = dorothea_filtering$gset)
g2 <- ggplot(dorothea_filtering, aes(x=gset, y=log_pval,
fill = factor(sign(NES)))) +
geom_bar(stat = "identity") + theme_minimal() +
geom_hline(yintercept = -log10(0.25),linetype="dotted" ) +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_text(hjust = 1),
panel.grid = element_blank(),
axis.title.x = element_text(size = 9),
legend.position = "none"
#plot.margin = unit(c(0, 0, 0, 0), 'cm')
) +
scale_fill_manual(values = c("steelblue","indianred")) +
coord_flip() + ylab("-log10(BH p-value)")
# miRNAs
miRNA_filtering = miRNA  %>% dplyr::slice(1:50) %>%
#dplyr::filter(pvalue < 0.05) %>%
arrange(-log10(adj_pvalue) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(adj_pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName)
miRNA_filtering$gset = unlist(lapply(strsplit(miRNA_filtering$gset,
"[A-Z]_"),
function(x) x[2]))
miRNA_filtering$gset = unlist(lapply(strsplit(miRNA_filtering$gset,
"_"),
function(x) x[1]))
miRNA_filtering$gset = factor(miRNA_filtering$gset,
levels = miRNA_filtering$gset)
g3 <- ggplot(miRNA_filtering, aes(x=gset, y=log_pval,
fill = factor(sign(NES)))) +
geom_bar(stat = "identity") + theme_minimal() +
geom_hline(yintercept = -log10(0.25),linetype="dotted" ) +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9),
axis.text.y = element_text(hjust = 1),
panel.grid = element_blank(),
legend.position = "none"
#plot.margin = unit(c(0, 0, 0, 0), 'cm')
) +
scale_fill_manual(values = c("steelblue","indianred")) +
coord_flip() + ylab("-log10(BH p-value)")
upper_panel = plot_grid(g1,g2,g3,align = "h", rel_widths = c(1,.45,.45),
nrow = 1)
# PROGENy filtering
progeny_filtering = progeny %>%
arrange(-log10(progeny_pvals + 0.00000001) * sign(progeny_scores)) %>%
mutate(dir_reg = sign(progeny_scores),
log_pval = -log10(progeny_pvals + 0.00000001) + 0.05,
gset = pathway) %>%
arrange(log_pval * dir_reg)
progeny_filtering$gset = factor(progeny_filtering$gset,
levels = progeny_filtering$gset)
g4 = ggplot(progeny_filtering,
aes(x=gset, y = log_pval,
fill = factor(dir_reg))) +
geom_bar(stat = "identity") + theme_minimal() +
theme(axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9),
legend.position = "bottom",
panel.grid = element_blank(),
legend.title = element_text(size=10),
legend.direction='vertical',
plot.margin = unit(c(0, 0, 8, 0), 'cm')
) +
scale_fill_manual(values = c("steelblue","indianred")) +
ylab("-log10(BH p-value)") +
geom_hline(yintercept = -log10(0.25),linetype="dotted" ) +
coord_flip() + labs(fill="Direction")
upper_panel = plot_grid(g1,g2,g3,g4,axis = "t" ,align = "h", rel_widths = c(.7,.35,.30,.30),
nrow = 1)
# Final panel
pdf("./data/figures/Figure4_raw.pdf",
width = 20.3,
height = 7.21)
plot(upper_panel)
dev.off()
# aesthetics
get_lfc_colors = circlize::colorRamp2(seq(-4,4,.5),
c(rev(colorRampPalette(RColorBrewer::brewer.pal(9, 'Blues'))(9)),
colorRampPalette(RColorBrewer::brewer.pal(9, 'Reds'))(8)))
cols = get_lfc_colors(seq(-4,4,1))
# GSEA filtering
GSEA_filtering = GSEA %>% dplyr::filter(pval < 0.05) %>%
slice(1:50) %>%
arrange(-log2(pval) * sign(NES)) %>%
mutate(dir_reg = sign(ES),
log_pval = -log10(pval),
dir_col = dir_reg * log_pval,
gset = pathway,
tile_color = get_lfc_colors(dir_col)) %>%
dplyr::select(gset,dir_col,tile_color)
GSEA_filtering$gset = factor(GSEA_filtering$gset,
levels = GSEA_filtering$gset)
g1 <- GSEA_filtering %>%
ggplot(aes(x=gset, y=1, fill=factor(1:nrow(GSEA_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 0, 0), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(GSEA_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
# Dorothea_filtering
dorothea_filtering = dorothea %>% dplyr::filter(pvalue < 0.05) %>%
arrange(-log2(pvalue) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName,
tile_color = get_lfc_colors(dir_col))
dorothea_filtering$gset = factor(dorothea_filtering$gset,
levels = dorothea_filtering$gset)
g2 <- dorothea_filtering %>%
ggplot(aes(x=gset, y=1,
fill=factor(1:nrow(dorothea_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 0, 0.5), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(dorothea_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
plot_grid(g1,g2)
# PROGENy filtering
progeny_filtering = progeny %>%
arrange(-log2(progeny_pvals) * sign(progeny_scores)) %>%
mutate(dir_reg = sign(progeny_scores),
log_pval = -log10(progeny_pvals),
dir_col = dir_reg * log_pval,
gset = pathway,
tile_color = get_lfc_colors(dir_col))
progeny_filtering$gset = factor(progeny_filtering$gset,
levels = progeny_filtering$gset)
g3 = progeny_filtering %>%
ggplot(aes(x=gset, y=1,
fill=factor(1:nrow(progeny_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 12.7, .5), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(progeny_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
# miRNAs
miRNA_filtering = miRNA %>% dplyr::filter(pvalue < 0.05) %>%
arrange(-log2(pvalue) * sign(NES)) %>%
mutate(dir_reg = sign(NES),
log_pval = -log10(pvalue),
dir_col = dir_reg * log_pval,
gset = RegulonName,
tile_color = get_lfc_colors(dir_col)) %>%
dplyr::select(gset,dir_col,tile_color)
miRNA_filtering$gset = unlist(lapply(strsplit(miRNA_filtering$gset,
"[A-Z]_"),
function(x) x[2]))
miRNA_filtering$gset = factor(miRNA_filtering$gset,
levels = miRNA_filtering$gset)
g4 <- miRNA_filtering %>%
ggplot(aes(x=gset, y=1, fill=factor(1:nrow(miRNA_filtering)),
height=.5)) +
geom_tile() + theme_minimal() +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill=NULL, colour='black'),
plot.margin = unit(c(0, 0, 13, .5), 'cm')) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=as.character(miRNA_filtering$tile_color),
na.value='black', guide=FALSE) +
coord_flip()
pdf("./data/figures/funcomics_tiles.pdf",
width = 16.3,
height = 7.21)
plot(plot_grid(g1,g2,g3,g4,nrow = 1,
rel_widths = c(1.0,.35,.35,.4)))
dev.off()
