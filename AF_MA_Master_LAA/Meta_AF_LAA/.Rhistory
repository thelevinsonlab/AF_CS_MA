# Extract the significant Cell_State categories as a vector
significant_cell_states_vector <- pull(significant_cell_states, Cell_State)
# Filter the original data
filtered_data <- NK %>%
filter(Cell_State %in% significant_cell_states_vector)
# NK
NK <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/NK.cells/NK.cells_Cell_State_Abundance.txt")
NK <- NK %>%
pivot_longer(
cols = starts_with("S"), # Columns to gather
names_to = "Cell_State", # Name of new 'key' column
values_to = "Abundance"  # Name of new 'value' column
)
NK <- NK %>%
mutate(
Cell_State = recode(
Cell_State,
S01 = "Classical NK",
S02 = "Normal-enriched NK",
S03 = "Unknown (S03)",
S04 = "Unknown (S04)",
S05 = "Unknown (S05)"
)
)
# Extract the group identifier from the ID
NK$Group <- sub("(\\w+).*", "\\1", NK$ID)
NK$Group <- gsub("[0-9]", "", NK$Group)
# Initialize an empty data frame to store the results
results <- data.frame()
# Loop through each unique Cell_State
for (cell_state in unique(NK$Cell_State)) {
# Filter data for the current Cell_State
filtered_data <- NK %>%
filter(Cell_State == cell_state)
# Perform t-tests comparing sevCCC against DCM and CTRL
t_test_DCM <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "DCM"))
t_test_CTRL <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "CTRL"))
# Store the results
results <- rbind(results, data.frame(
Cell_State = cell_state,
p_value_DCM = t_test_DCM$p.value,
p_value_CTRL = t_test_CTRL$p.value
))
}
# Adjust p-values for multiple comparisons using BH method
results$p_value_DCM_adjusted <- p.adjust(results$p_value_DCM, method = "BH")
results$p_value_CTRL_adjusted <- p.adjust(results$p_value_CTRL, method = "BH")
# Identify significant differences
results$significant_DCM <- ifelse(results$p_value_DCM_adjusted < 0.001, "Yes", "No")
results$significant_CTRL <- ifelse(results$p_value_CTRL_adjusted < 0.001, "Yes", "No")
# Show the final results
print(results)
# Filter the results to get the significant Cell_State categories
significant_cell_states <- results %>%
filter(p_value_DCM_adjusted < 0.001 | p_value_CTRL_adjusted < 0.001) %>%
dplyr::select(Cell_State)
# Extract the significant Cell_State categories as a vector
significant_cell_states_vector <- pull(significant_cell_states, Cell_State)
# Filter the original data
filtered_data <- NK %>%
filter(Cell_State %in% significant_cell_states_vector)
png("NK_plot.png", units="in", width = 14, height = 10, res=900)
ggplot(filtered_data, aes(x = Group, y = Abundance, fill = Group)) +
geom_boxplot() +
ggtitle("Classical NK") +
facet_wrap(~ Cell_State) +
xlab("") +
ylab("Abundance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
dev.off()
Macro <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/Monocytes.and.Macrophages/Monocytes.and.Macrophages_Cell_State_Abundance.txt")
View(Macro)
Macro <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/Monocytes.and.Macrophages/Monocytes.and.Macrophages_Cell_State_Abundance.txt")
Macro <- Macro %>%
pivot_longer(
cols = starts_with("S"), # Columns to gather
names_to = "Cell_State", # Name of new 'key' column
values_to = "Abundance"  # Name of new 'value' column
)
Macro <- Macro %>%
mutate(
Cell_State = recode(
Cell_State,
S01 = "Monocytes",
S02 = "Classical M0",
S03 = "Classical M1",
S04 = "Classical M2",
S05 = "M2-like",
S06 = "M2 foam cell-like",
S07 = "M2-like proliferative",
S08 = "Proliferative Macrophage",
S09 = "UMacronown (S09)",
)
)
# Extract the group identifier from the ID
Macro$Group <- sub("(\\w+).*", "\\1", Macro$ID)
Macro$Group <- gsub("[0-9]", "", Macro$Group)
# Initialize an empty data frame to store the results
results <- data.frame()
# Loop through each unique Cell_State
for (cell_state in unique(Macro$Cell_State)) {
# Filter data for the current Cell_State
filtered_data <- Macro %>%
filter(Cell_State == cell_state)
# Perform t-tests comparing sevCCC against DCM and CTRL
t_test_DCM <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "DCM"))
t_test_CTRL <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "CTRL"))
# Store the results
results <- rbind(results, data.frame(
Cell_State = cell_state,
p_value_DCM = t_test_DCM$p.value,
p_value_CTRL = t_test_CTRL$p.value
))
}
# Adjust p-values for multiple comparisons using BH method
results$p_value_DCM_adjusted <- p.adjust(results$p_value_DCM, method = "BH")
results$p_value_CTRL_adjusted <- p.adjust(results$p_value_CTRL, method = "BH")
# Identify significant differences
results$significant_DCM <- ifelse(results$p_value_DCM_adjusted < 0.001, "Yes", "No")
results$significant_CTRL <- ifelse(results$p_value_CTRL_adjusted < 0.001, "Yes", "No")
# Show the final results
print(results)
# Filter the results to get the significant Cell_State categories
significant_cell_states <- results %>%
filter(p_value_DCM_adjusted < 0.001 | p_value_CTRL_adjusted < 0.001) %>%
dplyr::select(Cell_State)
# Extract the significant Cell_State categories as a vector
significant_cell_states_vector <- pull(significant_cell_states, Cell_State)
# Filter the original data
filtered_data <- Macro %>%
filter(Cell_State %in% significant_cell_states_vector)
png("Macro_plot.png", units="in", width = 14, height = 10, res=900)
ggplot(filtered_data, aes(x = Group, y = Abundance, fill = Group)) +
geom_boxplot() +
ggtitle("Monocytes/Macrophages") +
facet_wrap(~ Cell_State) +
xlab("") +
ylab("Abundance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
dev.off()
PMN <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/PMNs/PMNs_Cell_State_Abundance.txt")
View(PMN)
PMN <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/PMNs/PMNs_Cell_State_Abundance.txt")
PMN <- PMN %>%
pivot_longer(
cols = starts_with("S"), # Columns to gather
names_to = "Cell_State", # Name of new 'key' column
values_to = "Abundance"  # Name of new 'value' column
)
PMN <- PMN %>%
mutate(
Cell_State = recode(
Cell_State,
S01 = "Differentiating Neutrophils",
S02 = "Activated Neutrophils",
S03 = "Classical activated Neutrophils"
)
)
# Extract the group identifier from the ID
PMN$Group <- sub("(\\w+).*", "\\1", PMN$ID)
PMN$Group <- gsub("[0-9]", "", PMN$Group)
# Initialize an empty data frame to store the results
results <- data.frame()
# Loop through each unique Cell_State
for (cell_state in unique(PMN$Cell_State)) {
# Filter data for the current Cell_State
filtered_data <- PMN %>%
filter(Cell_State == cell_state)
# Perform t-tests comparing sevCCC against DCM and CTRL
t_test_DCM <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "DCM"))
t_test_CTRL <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "CTRL"))
# Store the results
results <- rbind(results, data.frame(
Cell_State = cell_state,
p_value_DCM = t_test_DCM$p.value,
p_value_CTRL = t_test_CTRL$p.value
))
}
# Adjust p-values for multiple comparisons using BH method
results$p_value_DCM_adjusted <- p.adjust(results$p_value_DCM, method = "BH")
results$p_value_CTRL_adjusted <- p.adjust(results$p_value_CTRL, method = "BH")
# Identify significant differences
results$significant_DCM <- ifelse(results$p_value_DCM_adjusted < 0.001, "Yes", "No")
results$significant_CTRL <- ifelse(results$p_value_CTRL_adjusted < 0.001, "Yes", "No")
# Show the final results
print(results)
# Filter the results to get the significant Cell_State categories
significant_cell_states <- results %>%
filter(p_value_DCM_adjusted < 0.001 | p_value_CTRL_adjusted < 0.001) %>%
dplyr::select(Cell_State)
# Extract the significant Cell_State categories as a vector
significant_cell_states_vector <- pull(significant_cell_states, Cell_State)
# Filter the original data
filtered_data <- PMN %>%
filter(Cell_State %in% significant_cell_states_vector)
ggplot(filtered_data, aes(x = Group, y = Abundance, fill = Group)) +
geom_boxplot() +
ggtitle("PMN") +
facet_wrap(~ Cell_State) +
xlab("") +
ylab("Abundance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
dev.off()
png("PMN_plot.png", units="in", width = 14, height = 10, res=900)
ggplot(filtered_data, aes(x = Group, y = Abundance, fill = Group)) +
geom_boxplot() +
ggtitle("PMN") +
facet_wrap(~ Cell_State) +
xlab("") +
ylab("Abundance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
dev.off()
PCs_Cell_State_Abundance <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/PCs/PCs_Cell_State_Abundance.txt")
View(PCs_Cell_State_Abundance)
PC <- read.delim("~/PhD Heidelberg/Projects/New_chagas/WGCNA/ecotyper_output_carcinoma/Carcinoma_Cell_States/PCs/PCs_Cell_State_Abundance.txt")
PC <- PC %>%
pivot_longer(
cols = starts_with("S"), # Columns to gather
names_to = "Cell_State", # Name of new 'key' column
values_to = "Abundance"  # Name of new 'value' column
)
PC <- PC %>%
mutate(
Cell_State = recode(
Cell_State,
S01 = "Classical Plasma Cells",
S02 = "Unknown (S02)",
S03 = "Unknown (S03)",
S04 = "Unknown (S04)",
S05 = "Normal-enriched Plasma Cells",
S06 = "Unknown (S06)"
)
)
# Extract the group identifier from the ID
PC$Group <- sub("(\\w+).*", "\\1", PC$ID)
PC$Group <- gsub("[0-9]", "", PC$Group)
# Initialize an empty data frame to store the results
results <- data.frame()
# Loop through each unique Cell_State
for (cell_state in unique(PC$Cell_State)) {
# Filter data for the current Cell_State
filtered_data <- PC %>%
filter(Cell_State == cell_state)
# Perform t-tests comparing sevCCC against DCM and CTRL
t_test_DCM <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "DCM"))
t_test_CTRL <- t.test(Abundance ~ Group, data = filtered_data, subset = Group %in% c("sevCCC", "CTRL"))
# Store the results
results <- rbind(results, data.frame(
Cell_State = cell_state,
p_value_DCM = t_test_DCM$p.value,
p_value_CTRL = t_test_CTRL$p.value
))
}
# Adjust p-values for multiple comparisons using BH method
results$p_value_DCM_adjusted <- p.adjust(results$p_value_DCM, method = "BH")
results$p_value_CTRL_adjusted <- p.adjust(results$p_value_CTRL, method = "BH")
# Identify significant differences
results$significant_DCM <- ifelse(results$p_value_DCM_adjusted < 0.001, "Yes", "No")
results$significant_CTRL <- ifelse(results$p_value_CTRL_adjusted < 0.001, "Yes", "No")
# Show the final results
print(results)
# Filter the results to get the significant Cell_State categories
significant_cell_states <- results %>%
filter(p_value_DCM_adjusted < 0.001 | p_value_CTRL_adjusted < 0.001) %>%
dplyr::select(Cell_State)
# Extract the significant Cell_State categories as a vector
significant_cell_states_vector <- pull(significant_cell_states, Cell_State)
# Filter the original data
filtered_data <- PC %>%
filter(Cell_State %in% significant_cell_states_vector)
png("PC_plot.png", units="in", width = 14, height = 10, res=900)
ggplot(filtered_data, aes(x = Group, y = Abundance, fill = Group)) +
geom_boxplot() +
ggtitle("PC") +
facet_wrap(~ Cell_State) +
xlab("") +
ylab("Abundance") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
dev.off()
library(readxl)
Base_de_datos_Falla_Cardíaca_14_07_23_1_ <- read_excel("C:/Users/sergi/Downloads/Base de datos Falla Cardíaca_14-07-23 (1).xlsx")
View(Base_de_datos_Falla_Cardíaca_14_07_23_1_)
library(readxl)
Falla <- read_excel("C:/Users/sergi/Downloads/Base de datos Falla Cardíaca_14-07-23 (1).xlsx")
View(Falla)
head(Falla$IMC)
Calculate the module membership and the associated p-values
module.membership.measure <- cor(module_eigengenes, norm.counts, use = 'p')
module.membership.measure.pvals <- corPvalueStudent(module.membership.measure, nSamples)
module.membership.measure.pvals[1:10,1:10]
gene.signf.corr <- cor(norm.counts, traits$data.CCC.vs.all, use = 'p')
gene.signf.corr.pvals <- corPvalueStudent(gene.signf.corr, nSamples)
gene.signf.corr.pvals %>%
as.data.frame() %>%
arrange(V1) %>%
head(25)
View(module.membership.measure)
View(module.membership.measure.pvals)
str(module.membership.measure)
str(module.membership.measure.pvals)
source("src/utils_AF_Meta.R")
View(pairwise_ds_AF)
---
title: "16_gene_variability"
source("src/utils_AF_Meta.R")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
AF_Meta = lapply(AF_Meta, function(x){
x[["GEX_norm"]] = PLIER::rowNorm(x[["GEX"]])
return(x)
})
# Generating a unified data set
meta_targets = get_tibble_union(AF_Meta,"TARGETS") %>%
dplyr::select(sample,condition,ExpID) %>%
mutate(grl_id = paste(sample,ExpID,sep = "_"))
meta_gex = get_complete_gex_AF(meta_list = AF_Meta,
complete_targets = meta_targets,
gex_key = "GEX")
meta_gex_scale = get_complete_gex_AF(meta_list = AF_Meta,
complete_targets = meta_targets,
gex_key = "GEX_norm")
meta_targets = meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" | ExpID == "Sun_2021" | ExpID == "Herrera_Rivero_2022" | ExpID == "Santos_2020" | ExpID == "Zhu_2020"  ~ "RNA-Seq", TRUE ~ "microarray"))
# Modelling each factor
fisher_rank = run_fisher_meta_AF(meta_list = AF_Meta ,
n_missing = length(AF_Meta) - 5)
genes = names(fisher_rank)
# Performing a 2-way anova with interaction term (AF/study)
anova_study_scale = run_anovastats_AF(numeric_matrix = meta_gex_scale[genes,],
targets = meta_targets) #For sup
library(tidyverse)
library(ggpubr)
library(ggforce)
library(cowplot)
library(patchwork)
library(gridExtra)
library(grid)
tab_information <- read.delim2("~/AF_MA_Master_LAA/tab_information.txt")
setwd("C:/Users/sergi/OneDrive/Documents/PhD Heidelberg/Projects/AF_MA_Master_LAA")
tab_information <- read.delim2("~/tab_information.txt")
tab_information <- read.delim2("./tab_information.txt")
View(tab_information)
tab_information <- read.delim2("./tab_information.txt")
# Convert the data to long format
tab_information_long <- tab_information %>%
pivot_longer(cols = -c(First.author.name, Information), names_to = "Variable", values_to = "Type")
# Define the desired order
levels_order <- c("Age", "Sex", "Ethnicity", "Comorbidities", "Treatment", "LVEF")
# Convert 'Variable' to a factor with the specified level order
tab_information_long$Variable <- factor(tab_information_long$Variable, levels = levels_order)
# Generate the graph
final_plot <- ggplot(tab_information_long, aes(x = reorder(First.author.name, First.author.name), y = Variable, fill = Type)) +
geom_tile(color = "black", linewidth = 0.5) +
geom_text(aes(label = ifelse(Type == "Group", "Gr", ifelse(Type == "Individual", "Ind", "NR"))),
size = 3, color = "black") +
scale_fill_manual(values = c("Group" = "#E69F00", "Individual" = "#009E73", "NR" = "#999999")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE))
# Save the plot
ggsave("info_plot.png", plot = final_plot, width = 6, height = 8, dpi = 600)
sample_information <- read.delim("./sample_information.txt")
head(sample_information)
# Arrange the data in ascending order of total_patients
data <- sample_information %>%
arrange(total_patients)
# Create a new dataframe for plotting
plot_data <- data.frame(
Study = factor(data$First.author.name, levels = data$First.author.name),
AF = data$total_af,
SR = data$total_sr
)
# Melt the data into long format
plot_data_long <- reshape2::melt(plot_data, id.vars = "Study", variable.name = "Condition", value.name = "Count")
# Create the bar plot
sample_plot <- ggplot(plot_data_long, aes(x = Study, y = Count, fill = Condition)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(x = "", y = "Number of Patients", title = "") +
theme_classic() +
scale_fill_manual(values = c("AF" = "#0072B2", "SR" = "#E69F00"))
# Save the plot
ggsave("sample_plot.png", plot = sample_plot, width = 4, height = 8, dpi = 600)
leg1 <- get_legend(final_plot +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
leg2 <- get_legend(sample_plot+
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom"))
plot.samplesize = sample_plot +theme(legend.position = "none")
plot.tile = final_plot  +theme(legend.position = "none")
plot.tilesample = plot_grid(plot.tile, sample_plot,
ncol = 2,
align = "h",
labels = "AUTO",
rel_widths = c(1,1.5))
blank_p <- plot_spacer() + theme_void()
leg12 <- plot_grid(blank_p,leg1,blank_p, leg2,
blank_p, blank_p,
nrow = 1)
fig_1 = plot_grid(plot.tilesample, leg12, nrow = 2,
align = "h",
axis = "t",
rel_widths = c(1, 0.1),
rel_heights = c(1,0.1))
fig_1
pdf("data/figures/Figure2.pdf",
width = 10,
height = 6)
fig_1
dev.off()
source("src/utils_AF_Meta.R")
View(get_all_limma_AF)
library(PLIER)
library(reshape2)
library(ROCR)
library(fgsea)
library(dplyr)
library(tidyr)
library(WriteXLS)
source("src/utils_AF_Meta.R")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
AF_Meta_RAA = readRDS(file = "data/AF_Meta_RAA.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
experiments_RAA = names(AF_Meta_RAA)
names(experiments_RAA) = experiments_RAA
str(AF_Meta)
set.seed(12345)
# For labeling
t_matrix = get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t")
View(t_matrix)
View(pairwise_ds_AF)
pairwise_500 = pairwise_ds_AF(experiments = experiments,
meta_list = AF_Meta,
t_matrix = t_matrix,
ngenes = 500) #Second page excel
View(pairwise_500)
View(getRisk_Stats_AF)
source("src/utils_AF_Meta.R")
AF_Meta = list()
##GSE41177
load(file = "data_processing/scripts/GSE41177/GSE41177_counts.ro")
load(file = "data_processing/scripts/GSE41177/GSE41177_targets.ro")
AF_Meta[["GSE41177"]] = list("GEX"= GSE41177_counts,
"TARGETS" = GSE41177_targets)
##GSE31821
load(file = "data_processing/scripts/GSE31821/GSE31821_counts.ro")
load(file = "data_processing/scripts/GSE31821/GSE31821_targets.ro")
AF_Meta[["GSE31821"]] = list("GEX"= GSE31821_counts,
"TARGETS" = GSE31821_targets)
##GSE14975
load(file = "data_processing/scripts/GSE14975/GSE14975_counts.ro")
load(file = "data_processing/scripts/GSE14975/GSE14975_targets.ro")
AF_Meta[["GSE14975"]] = list("GEX"= GSE14975_counts,
"TARGETS" = GSE14975_targets)
##GSE79768
load(file = "data_processing/scripts/GSE79768/GSE79768_counts.ro")
load(file = "data_processing/scripts/GSE79768/GSE79768_targets.ro")
AF_Meta[["GSE79768"]] = list("GEX"= GSE79768_counts,
"TARGETS" = GSE79768_targets)
##GSE115574
load(file = "data_processing/scripts/GSE115574/GSE115574_counts.ro")
load(file = "data_processing/scripts/GSE115574/GSE115574_targets.ro")
AF_Meta[["GSE115574"]] = list("GEX"= GSE115574_counts,
"TARGETS" = GSE115574_targets)
##GSE128188
load(file = "data_processing/scripts/GSE128188/GSE128188_counts.ro")
load(file = "data_processing/scripts/GSE128188/GSE128188_targets.ro")
AF_Meta[["GSE128188"]] = list("GEX"= GSE128188_counts,
"TARGETS" = GSE128188_targets)
##GSE69890
load(file = "data_processing/scripts/GSE69890/GSE69890_counts.ro")
load(file = "data_processing/scripts/GSE69890/GSE69890_targets.ro")
AF_Meta[["GSE69890"]] = list("GEX"= dt_matrix,
"TARGETS" = GSE69890_targets)
##Sun
load(file = "data_processing/scripts/Sun/Sun_count.ro")
load(file = "data_processing/scripts/Sun/Sun_targets.ro")
Sun_count <- as.matrix(Sun_count)
AF_Meta[["Sun"]] = list("GEX"= Sun_count,
"TARGETS" = targets)
##Herrera_Rivero
load(file = "data_processing/scripts/Herrera-Rivero/Herrera_Rivero_count.ro")
load(file = "data_processing/scripts/Herrera-Rivero/Herrera_Rivero_targets.ro")
Herrera_Rivero_count <- as.matrix(Herrera_Rivero_count)
AF_Meta[["Herrera_Rivero"]] = list("GEX"= Herrera_Rivero_count,
"TARGETS" = targets)
##Santos
load(file = "data_processing/scripts/Santos/Santos_count.ro")
load(file = "data_processing/scripts/Santos/Santos_targets.ro")
Santos_count <- as.matrix(Santos_count)
AF_Meta[["Santos"]] = list("GEX"= Santos_count,
"TARGETS" = targets)
##Zhu
load(file = "data_processing/scripts/Zhu/Zhu_count.ro")
load(file = "data_processing/scripts/Zhu/Zhu_targets.ro")
Zhu_count <- as.matrix(Zhu_count)
AF_Meta[["Zhu"]] = list("GEX"= Zhu_count,
"TARGETS" = targets)
