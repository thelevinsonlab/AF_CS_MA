long_edad <- melt(setDT(edad), id.vars = c("id"), variable.name = "group")
long_IMC <- melt(setDT(IMC), id.vars = c("id"), variable.name = "group")
long_Alb <- melt(setDT(Alb), id.vars = c("id"), variable.name = "group")
edad_plot <- ggplot(data=long_edad, aes(x=value, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) + scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() + scale_x_continuous(n.breaks = 10)
IMC_plot <- ggplot(data=long_IMC, aes(x=value, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) + scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() + scale_x_continuous(n.breaks = 10)
Alb_plot <- ggplot(data=long_Alb, aes(x=value, group=group, fill=group)) +
geom_density(adjust=1.5, alpha=.4) + scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() + scale_x_continuous(n.breaks = 10)
edad_plot
IMC_plot
Alb_plot
edad_plot
IMC_plot
edad_plot
IMC_plot
Alb_plot
IMC_plot
edad_plot
AF_Meta = readRDS(file = "./AF_Meta.rds") #main object
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
experiment_size = sort(unlist(lapply(AF_Meta,
function(x) ncol(x$GEX))),
decreasing = T)
deg_stats = readRDS("./deg_stats.rds")
pval = ggplot(deg_stats$pvalue,
aes(x = factor(experiment,levels = names(experiment_size)),
y = pvalue)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
xlab("") + ylab("-log10(p-value)")
library(tidyverse)
library(cowplot)
pval = ggplot(deg_stats$pvalue,
aes(x = factor(experiment,levels = names(experiment_size)),
y = pvalue)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
xlab("") + ylab("-log10(p-value)")
tval = ggplot(deg_stats$tvalue,
aes(x = factor(experiment,levels = names(experiment_size)),
y = tvalue)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
ylab("t-value")
lfc = ggplot(deg_stats$lfc,
aes(x = factor(experiment,
levels = names(experiment_size)),
y = lfc)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_text(angle = 90,
hjust = 1),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
ylab("LFC") + xlab("")
pdf("data/figures/sup/SupplementalFigure3.pdf",
width = 8,
height = 10)
print(plot_grid(pval,tval,lfc,
align = "v", ncol = 1,
rel_heights = c(1,1,1.3)))
dev.off()
print(plot_grid(pval,tval,lfc,
align = "v", ncol = 1,
rel_heights = c(1,1,1.3)))
library(tidyverse)
AF_Meta= readRDS("data/AF_Meta.rds")
Experiments = names(AF_Meta)
AFgenes_up = c("ABCC9", "HCN4", "KCNA5", "KCND3", "KCNE1", "KCNE2", "KCNE3", "SCN1B", "SCN2B", "SCN3B", "SCN4B", "SCN5A", "SCN10A")
AFgenes_dn = c("Pitx2", "ZFHX3")
AFgenes = data.frame(matrix(NA, ncol = length(Experiments), nrow = length(c(AFgenes_up, AFgenes_dn))))
colnames(AFgenes) = Experiments
rownames(AFgenes) = c(AFgenes_up, AFgenes_dn)
# loop over studies and genes to copy t-values into the dataframe
for (study in names(AF_Meta)){
studygenes = AF_Meta[[study]]$AF_limma %>%
filter(ID %in% c(AFgenes_dn, AFgenes_up))
for (gene in studygenes$ID){
AFgenes[gene,study] = studygenes %>% filter(ID == gene) %>%
select(t)
}
}
View(AFgenes)
for (study in names(AF_Meta)){
studygenes = AF_Meta[[study]]$AF_limma %>%
filter(ID %in% c(AFgenes_dn, AFgenes_up))
for (gene in studygenes$ID){
AFgenes[gene,study] = studygenes %>% filter(ID == gene) %>%
select(t)
}
}
AF_Meta[["Yeh_2013"]]$AF_limma
View(AF_Meta)
library(limma)
source("src/data_utils.R")
source("src/misc_utils.R")
#load data
AF_Meta= readRDS("data/AF_Meta.rds")
#Yeh_2013
AF_Meta$Yeh_2013$TARGETS = AF_Meta$Yeh_2013$TARGETS %>% mutate(ExpID = "Yeh_2013")
AF_Meta$Yeh_2013$GEX[1,]
AF_Meta$Yeh_2013$TARGETS$sample = str_sub(AF_Meta$Yeh_2013$TARGETS$sample, start = 1, end = 10)
AF_Meta$Yeh_2013$TARGETS$sample
#Puertas_2018
AF_Meta$Puertas_2018$TARGETS = AF_Meta$Puertas_2018$TARGETS %>% mutate(ExpID = "Puertas_2018")
AF_Meta$Adam_2010$TARGETS = AF_Meta$Adam_2010$TARGETS %>% mutate(ExpID = "Adam_2010")
AF_Meta$Tsai_2016$TARGETS = AF_Meta$Tsai_2016$TARGETS %>% mutate(ExpID = "Tsai_2016")
AF_Meta$Tsai_2016$GEX[1,]
AF_Meta$Tsai_2016$TARGETS$sample = str_sub(AF_Meta$Tsai_2016$TARGETS$sample, start = 1, end = 10)
AF_Meta$Tsai_2016$TARGETS$sample
AF_Meta$Tsai_2016$TARGETS = AF_Meta$Tsai_2016$TARGETS %>% mutate(ExpID = "Tsai_2016")
AF_Meta$Tsai_2016$GEX[1,]
AF_Meta$Tsai_2016$TARGETS$sample = str_sub(AF_Meta$Tsai_2016$TARGETS$sample, start = 1, end = 10)
AF_Meta$Tsai_2016$TARGETS$sample
AF_Meta$Deniz_2021$TARGETS = AF_Meta$Deniz_2021$TARGETS %>% mutate(ExpID = "Deniz_2021")
AF_Meta$Deniz_2021$GEX[1,]
AF_Meta$Deniz_2021$TARGETS$sample = str_sub(AF_Meta$Deniz_2021$TARGETS$sample, start = 1, end = 10)
AF_Meta$Deniz_2021$TARGETS$sample
AF_Meta$Thomas_2019$TARGETS = AF_Meta$Thomas_2019$TARGETS %>% mutate(ExpID = "Thomas_2019")
AF_Meta$Hsu_2018$TARGETS = AF_Meta$Hsu_2018$TARGETS %>% mutate(ExpID = "Hsu_2018")
covariates_summary = lapply(AF_Meta, function(x){
covariates = c("Age","Gender",
"HTx","DCM",
"Sample","HeartFailure",
"Disease","disease")
red_targets = dplyr::filter(x$TARGETS,
condition == "AF")
metadata = colnames(x$TARGETS)
metadata_check = c("no","no","no","no","no")
names(metadata_check) = c("Age","Gender",
"HTx", "DCM",
"Extra")
if("Age" %in% metadata){
metadata_check[1] = "yes"
}
if("Gender" %in% metadata){
n_vars = length(unique(x$TARGETS$Gender))
if(n_vars == 2){
metadata_check[2] = "yes"
}
}
if("HTx" %in% metadata){
n_vars = length(unique(red_targets$HTx))
if(n_vars == 2){
metadata_check[3] = "yes"
}
}
if("DCM" %in% metadata){
n_vars = length(unique(red_targets$DCM))
if(n_vars == 2){
metadata_check[4] = "yes"
}
}
if(sum(!(metadata %in% covariates))>0){
metadata_check[5] = "yes"
}
return(metadata_check)
})
covariate_summary = data.frame(t(data.frame(covariates_summary)),
stringsAsFactors = F)
covariate_summary$ID = rownames(covariate_summary)
ids = dplyr::filter(covariate_summary,
Age == "no" &
Gender == "no",
HTx == "no") %>%
dplyr::select(ID)
covariate_summary = dplyr::filter(covariate_summary,
!ID %in% ids[[1]])
run_AFlimma <- function(ExpMat, Targets){
library(limma)
#Adjust a linear model to the expression data
f = factor(Targets$condition, levels= c("AF","SR"))
design = model.matrix(~0+f)
colnames(design) = c("yes","no")
fit = lmFit(ExpMat, design)
#Define contrasts
cont.matrix = makeContrasts(AF_sign = yes-no,
levels=design)
#Empirical Bayes
fit2 = contrasts.fit(fit, cont.matrix)
fit2 = eBayes(fit2)
#obtain differentially expressed genes
AF_results = as.data.frame(topTable(fit2,adjust.method = "BH",number = Inf)) %>%
tibble::rownames_to_column() %>%
arrange(desc(abs(t))) %>% as_tibble()
colnames(AF_results)[1] = "ID"
return(AF_results)
}
AF_Meta[ids[[1]]] = lapply(AF_Meta[ids[[1]]], function(x){
x[["AF_limma"]] = run_AFlimma(x$GEX, x$TARGETS)
return(x)
})
experiments = names(AF_Meta)
names(experiments) = experiments
experiment_size = sort(unlist(lapply(AF_Meta,
function(x) ncol(x$GEX))),
decreasing = T)
get_all_limma_AF <- function(meta_list, limma_column){
sel_cols =  c("ID","ExpID", limma_column)
limma_results = get_tibble_union(meta_list,"AF_limma") %>%
dplyr::select(all_of(sel_cols)) %>%
spread(sel_cols[2],sel_cols[3])
limma_results_mat =  as.matrix(limma_results[,-1])
rownames(limma_results_mat) = limma_results[[1]]
return(limma_results_mat)
}
p_matrix = data.frame(get_all_limma_AF(meta_list = AF_Meta,
limma_column = "P.Value"),
check.names = F) %>%
mutate_all(function(x) -log10(x)) %>%
gather("experiment","pvalue") %>% na.omit()
t_matrix = data.frame(get_all_limma_AF(meta_list = AF_Meta,
limma_column = "t"),
check.names = F) %>%
gather("experiment","tvalue") %>% na.omit()
lfc_matrix = data.frame(get_all_limma_AF(meta_list = AF_Meta,
limma_column = "logFC"),
check.names = F) %>%
gather("experiment","lfc") %>% na.omit()
deg_stats = list("pvalue" = p_matrix,
"tvalue" = t_matrix,
"lfc" = lfc_matrix)
saveRDS(deg_stats,
"./deg_stats.rds")
saveRDS(AF_Meta, file = "data/AF_Meta.rds")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
experiments = names(AF_Meta)
names(experiments) = experiments
experiment_size = sort(unlist(lapply(AF_Meta,
function(x) ncol(x$GEX))),
decreasing = T)
deg_stats = readRDS("./deg_stats.rds")
pval = ggplot(deg_stats$pvalue,
aes(x = factor(experiment,levels = names(experiment_size)),
y = pvalue)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
xlab("") + ylab("-log10(p-value)")
tval = ggplot(deg_stats$tvalue,
aes(x = factor(experiment,levels = names(experiment_size)),
y = tvalue)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
ylab("t-value")
lfc = ggplot(deg_stats$lfc,
aes(x = factor(experiment,
levels = names(experiment_size)),
y = lfc)) + geom_violin() +
theme_minimal() +
theme(axis.title = element_text(size=12),
axis.text.x = element_text(angle = 90,
hjust = 1),
axis.text = element_text(size=10),
panel.background = element_rect(fill=NULL,
color = "black"),
panel.grid = element_blank()) +
ylab("LFC") + xlab("")
pdf("data/figures/sup/SupplementalFigure3.pdf",
width = 8,
height = 10)
print(plot_grid(pval,tval,lfc,
align = "v", ncol = 1,
rel_heights = c(1,1,1.3)))
dev.off()
library(tidyverse)
AF_Meta= readRDS("data/AF_Meta.rds")
Experiments = names(AF_Meta)
AFgenes_up = c("ABCC9", "HCN4", "KCNA5", "KCND3", "KCNE1", "KCNE2", "KCNE3", "SCN1B", "SCN2B", "SCN3B", "SCN4B", "SCN5A", "SCN10A")
AFgenes_dn = c("Pitx2", "ZFHX3")
AFgenes = data.frame(matrix(NA, ncol = length(Experiments), nrow = length(c(AFgenes_up, AFgenes_dn))))
colnames(AFgenes) = Experiments
rownames(AFgenes) = c(AFgenes_up, AFgenes_dn)
# loop over studies and genes to copy t-values into the dataframe
for (study in names(AF_Meta)){
studygenes = AF_Meta[[study]]$AF_limma %>%
filter(ID %in% c(AFgenes_dn, AFgenes_up))
for (gene in studygenes$ID){
AFgenes[gene,study] = studygenes %>% filter(ID == gene) %>%
select(t)
}
}
# tidy formatting
AFgenes_tidy = AFgenes %>%
rownames_to_column("gene") %>%
as.tibble() %>%
gather(Experiments, key = Study, value = "t")%>%
mutate(gene = factor(gene, levels = c(AFgenes_up, AFgenes_dn)))
View(AFgenes)
## plot results
plot.AF = ggplot(data = AFgenes_tidy, aes(x= gene, y= t))+
geom_boxplot()+
geom_point(aes(color =Study),
size = 4,
alpha = 0.6)+
theme_classic()+
labs(x="AF marker genes",
y = "t-value")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size=12))+
geom_hline(yintercept = 0,
color = "grey",
linetype = 2)+
geom_vline(xintercept = (length(AFgenes_up)+ 0.5),
color = "black",
linetype =1)+
ggtitle("AF-marker gene expression (t-values) for all studies in AF_Meta")
print(plot.AF)
pdf("data/figures/sup/SupplementalFigure4.pdf",
width = 12,
height = 5)
plot.AF
dev.off()
source("src/data_utils.R") #general functions
source("src/misc_utils.R")
AF_Meta = readRDS(file = "data/AF_Meta.rds") #main object
library(pwr)
library(plier)
install.packages("plier")
install_github("wgmao/PLIER")
library(devtools)
library(devtools)
install_github("wgmao/PLIER")
install_github("wgmao/PLIER", force = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("plier")
library(pwr)
library(plier)
library(Rtsne)
library(sjstats)
library(dplyr)
library(tidyverse)
library(cowplot)
get_complete_gex_AF <- function(meta_list, gex_key = "GEX",
complete_targets){
#METAheart object is a
all_genes = unique(unlist(lapply(meta_list,
function(x) rownames(x[[gex_key]]))))
gex_union = matrix(NA,nrow = length(all_genes),ncol = nrow(complete_targets))
colnames(gex_union) = complete_targets$grl_id
rownames(gex_union) = all_genes
for(e in unique(complete_targets$ExpID)){
fdf = filter(complete_targets,ExpID == e)
gex = (meta_list[[e]])[[gex_key]]
genes = rownames(gex)[rownames(gex) %in% all_genes]
gex_union[genes,fdf$grl_id] = gex
}
return(gex_union)
}
# All samples' information
meta_targets = get_tibble_union(AF_Meta,"TARGETS") %>%
dplyr::select(sample, condition, ExpID) %>%
mutate(grl_id = paste(sample, ExpID,sep = "_"))
# A single gene expression matrix with all samples
meta_gex = get_complete_gex_AF(meta_list = AF_Meta,
complete_targets = meta_targets,
gex_key = "GEX")
View(meta_gex)
View(meta_targets)
meta_targets = meta_targets %>% mutate(Tech = "microarray")
meta_targets %>% mutate(Tech = case_when(ExpID = "Hsu_2018" | ExpID = "Thomas_2019" ~ "RNA-Seq"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", .default = "microarray"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", .default == "microarray"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", .default = "microarray"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", TRUE = "microarray"))
meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", TRUE ~ "microarray"))
meta_targets = meta_targets %>% mutate(Tech = case_when(ExpID == "Hsu_2018" | ExpID == "Thomas_2019" ~ "RNA-Seq", TRUE ~ "microarray"))
meta_gex_naomit = meta_gex[rowSums(is.na(meta_gex))==0,]
dim(meta_gex_naomit)
pca_meta = prcomp(t(meta_gex_naomit[,meta_targets$grl_id]),center = T,scale. = T)
pca_meta_sum = summary(pca_meta) #This is the object to plot
pca_meta_sum[["plot_df"]] = meta_targets %>% mutate("PC1" = pca_meta$x[,1],
"PC2" = pca_meta$x[,2])
saveRDS(pca_meta_sum, file = "data/figure_objects/pca_meta_summary.rds")
# 2. Matrix of z-scores + PCA
AF_Meta = lapply(AF_Meta, function(x){
targets = x[["TARGETS"]]
gex = x[["GEX"]]
af_gex = gex[,(targets %>%
dplyr::filter(condition == "AF"))$sample]
healthy_gex = gex[,(targets %>%
dplyr::filter(condition == "SR"))$sample]
ref_mean = rowMeans(healthy_gex)
ref_sd = apply(healthy_gex,1,sd)
x[["Zmat"]] = (af_gex - ref_mean)/ref_sd
return(x)
})
z_targets = meta_targets %>% filter(condition == "AF")
meta_gex_z = get_complete_gex_AF(meta_list = AF_Meta,
complete_targets = z_targets,
gex_key = "Zmat")
meta_gex_z_naomit = meta_gex_z[rowSums(is.na(meta_gex_z))==0,]
trans <- t(meta_gex_z_naomit[,z_targets$grl_id])
trans_removed <- trans[ , which(apply(trans, 2, var) != 0)]
pca_meta_z = prcomp(trans_removed,center = T,scale. = T)
pca_meta_z_sum = summary(pca_meta_z) #This is the object to plot
pca_meta_z_sum[["plot_df"]] = z_targets %>% mutate("PC1" = pca_meta_z$x[,1],
"PC2" = pca_meta_z$x[,2])
saveRDS(pca_meta_z_sum, file = "data/figure_objects/pca_meta_summary_z.rds")
# 3. Fitting a linear model to each PC of z-transformed hf samples
# to find associations with study
pcs_study = run_anovastats_single(numeric_matrix = t(pca_meta_z_sum$x),
targets = z_targets,
factor_a = "ExpID",
pval = 0.05)
# Map to proportion explained
pcs_study = mutate(pcs_study,
prop_var = pca_meta_z_sum$importance[2,pcs_study$PC]) %>%
dplyr::arrange(desc(prop_var)) %>%
dplyr::select(PC, factor_a_vect, prop_var) %>%
dplyr::mutate(factor_a_vect = as.character(factor_a_vect))
total_row = c("TOTAL","",sum(pcs_study$prop_var))
pcs_study = pcs_study %>% mutate(prop_var = as.character(prop_var))
names(total_row) = colnames(pcs_study) = c("PCs","p_value","Prop. Var")
pcs_study = bind_rows(pcs_study, total_row)
print(pcs_study,n=100)
# 5. t-SNE of z-transformed data
## Rtsne function may take some minutes to complete...
set.seed(9)
my_Rtsne <- Rtsne(X = data.matrix(meta_gex_z_naomit_inf),
perplexity = floor((nrow(meta_gex_z_naomit_inf) - 1) / 3),
dims = 2)
my_Rtsne <- Rtsne(X = data.matrix(meta_gex_z_naomit),
perplexity = floor((nrow(meta_gex_z_naomit) - 1) / 3),
dims = 2)
meta_gex_z_naomit_inf <- meta_gex_z_naomit
meta_gex_z_naomit_inf[sapply(meta_gex_z_naomit_inf, simplify = 'matrix', is.infinite)] <- 0
meta_gex_z_naomit_inf = meta_gex_z_naomit_inf[rowSums(is.na(meta_gex_z_naomit_inf))==0,]
nrow(meta_gex_z_naomit_inf)
tsne_model = Rtsne(t(meta_gex_z_naomit_inf[,z_targets$grl_id]),
pca=TRUE, dims=2, perplexity = 15)
my_Rtsne <- Rtsne(X = data.matrix(meta_gex_z_naomit_inf),
perplexity = floor((nrow(meta_gex_z_naomit_inf) - 1) / 3),
dims = 2)
library(tidyverse)
library(limma)
library(edgeR)
library(stringr)
#1) Read gene expression data, filter & normalize, and save as count file.
df= read.table("data/GSE138252_counts.txt", header = TRUE, sep = "\t")
colnames(df)
View(df)
GSE138252_human_2785_merged_gene_name_expression <- read.delim("~/PhD Heidelberg/Projects/AF_MA_Master_LAA/data_processing/scripts/GSE138252/data/GSE138252_human_2785_merged_gene_name_expression.txt")
View(GSE138252_human_2785_merged_gene_name_expression)
GSE138252_human_merged_genebody_exp <- read.delim("~/PhD Heidelberg/Projects/AF_MA_Master_LAA/data_processing/scripts/GSE138252/data/GSE138252_human_merged_genebody_exp.txt")
View(GSE138252_human_merged_genebody_exp)
#load data
AF_Meta= readRDS("data/AF_Meta.rds")
View(AF_Meta)
source("src/utils_AF_Meta.R")
View(myMDS_AF)
View(run_AFlimma)
library(tidyverse)
library(ggpubr)
library(ggforce)
library(cowplot)
library(patchwork)
library(gridExtra)
library(grid)
source("src/utils_AF_Meta.R")
AF_Meta = list()
##GSE41177
load(file = "data_processing/scripts/GSE41177/GSE41177_counts.ro")
load(file = "data_processing/scripts/GSE41177/GSE41177_targets.ro")
AF_Meta[["GSE41177"]] = list("GEX"= GSE41177_counts,
"TARGETS" = GSE41177_targets)
View(AF_Meta)
str(GSE41177_counts)
str(GSE41177_targets)
